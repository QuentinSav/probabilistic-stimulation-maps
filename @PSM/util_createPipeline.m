function util_createPipeline(obj)
% Function used to create the pipeline for training, testing, validating
% and post-processing the probabilistic stimulation map.

switch obj.algorithm
    case 'Nguyen2019'

        obj.pipeline.training = {
            @(method) obj.util_setFilter('rounded'), ...
            @(features) obj.exe_compileFeatures( ...
                {'coord', ...
                'indexVTAs', ...
                'weights', ...
                'scores'}), ...
            @(images) obj.exe_computeFeatureImages( ...
                {'n', ...
                'mean', ...
                'scoresArray'}), ... 
            @(statTest, h0) obj.exe_computeStatTests('exactWilcoxon', 'zero'), ...
            @(method) obj.exe_computeFalsePosCorrection('Benjamini-Hochberg'), ...
            @obj.exe_computeSignMeanImage};

        obj.pipeline.testing = {
            
            };

        obj.pipeline.validation = {@(method, KFold) obj.util_getValidPartition('KFold', 5)};
        
        obj.pipeline.postprocessing = {};
        
    case 'Dembek2019'
        
        obj.pipeline.training = {
            @(method) obj.util_setFilter('rounded'), ...
            @(features) obj.exe_compileFeatures( ...
                {'coord', ...
                'indexVTAs', ...
                'weights', ...
                'scores', ...
                'meanScoresAmplitudes', ...
                'stimAmplitudes'}), ...
            @(images) obj.exe_computeFeatureImages( ...
                {'n', ...
                'mean', ...
                'eArray', ...
                'h0_meanScoresAmplitude'}), ...
            @(minN) obj.exe_thresholdImages(15), ...
            @(statTest, h0Type) obj.compute_pImage('approxWilcoxon', 'h0_meanEffAmplitude'), ...
            @(method) obj.type1ErrorCorrection('No correction'), ...
            @obj.compute_significantMeanImage};

        obj.pipeline.testing = {
            };

        obj.pipeline.validation = {@(method, ratio) obj.util_getValidPartition('Out-of-sample', 0.2)};

    case 'Reich2019'
        
    case 'Proposed'

end
end