function util_createPipeline(obj)

switch obj.algorithm
    case 'Nguyen2019'

        obj.pipeline.training = {
            @(method) obj.util_setFilter('rounded'), ...
            @(features) obj.exe_compileFeatures( ...
                {'coord', ...
                'indexVTAs', ...
                'weights', ...
                'efficiencies'}), ...
            @(images) obj.exe_computeFeatureImages( ...
                {'n', ...
                'mean', ...
                'eArray'}), ... 
            @(statTest, h0) obj.exe_computeStatTests('exactWilcoxon', 'zero'), ...
            @(method) obj.exe_computeFalsePosCorrection('Benjamini-Hochberg'), ...
            @obj.exe_computeSignMeanImage};

        obj.pipeline.testing = {
            
            };

        obj.pipeline.validationMethod = {@(method, KFold) obj.util_getValidPartition('KFold', 5)};


    case 'DembekRoediger2019'

    case 'ReichHorn2019'

    case 'Proposed'

end
end